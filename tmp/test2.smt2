(set-info :original "test.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(define-sort ProgramInt () (_ BitVec 32))
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (ProgramInt ))
(declare-rel main@_bb (ProgramInt ProgramInt ))
(declare-rel main@verifier.error (ProgramInt ))
(declare-rel main@verifier.error.split ())
(declare-var main@%_5_0 Bool )
(declare-var main@%_1_0 ProgramInt )
(declare-var @unknown1_0 ProgramInt )
(declare-var main@%_2_0 ProgramInt )
(declare-var main@%_3_0 Bool )
(declare-var @llvm.used_0 ProgramInt )
(declare-var main@%a.0.i_0 ProgramInt )
(declare-var main@%_4_0 ProgramInt )
(declare-var main@%a.0.i.lcssa_0 ProgramInt )
(declare-var main@%a.0.i_1 ProgramInt )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @unknown1_0))
(rule (=> (and (main@entry @unknown1_0)
         true
         (bvugt @llvm.used_0 #x00000000)
         (= main@%a.0.i_0 #x00000007))
    (main@_bb @unknown1_0 main@%a.0.i_0)))
(rule (=> (and (main@_bb @unknown1_0 main@%a.0.i_0)
         true
         (= main@%_1_0 @unknown1_0)
         (= main@%_3_0 (= main@%_2_0 #x00000000))
         (= main@%_4_0 (bvadd main@%a.0.i_0 #x00000001))
         main@%_3_0
         (= main@%a.0.i.lcssa_0 main@%a.0.i_0))
    (main@verifier.error main@%a.0.i.lcssa_0)))
(rule (=> (and (main@_bb @unknown1_0 main@%a.0.i_0)
         true
         (= main@%_1_0 @unknown1_0)
         (= main@%_3_0 (= main@%_2_0 #x00000000))
         (= main@%_4_0 (bvadd main@%a.0.i_0 #x00000001))
         (not main@%_3_0)
         (= main@%a.0.i_1 main@%_4_0))
    (main@_bb @unknown1_0 main@%a.0.i_1)))
(rule (=> (and (main@verifier.error main@%a.0.i.lcssa_0)
         true
         (= main@%_5_0 (= main@%a.0.i.lcssa_0 #x00000000))
         main@%_5_0)
    main@verifier.error.split))
(query main@verifier.error.split)

