(set-info :original "test.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(set-logic HORN)
(declare-fun main@verifier.error ((_ BitVec 32)) Bool)
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@entry ((_ BitVec 32)) Bool)
(declare-fun verifier.error (Bool Bool Bool) Bool)
(declare-fun main@_bb ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (verifier.error false false false))
(assert (verifier.error false true true))
(assert (verifier.error true false true))
(assert (verifier.error true true true))
(assert (forall ((@unknown1_0 (_ BitVec 32))) (main@entry @unknown1_0)))
(assert (forall ((@unknown1_0 (_ BitVec 32))
         (@llvm.used_0 (_ BitVec 32))
         (main@%a.0.i_0 (_ BitVec 32)))
  (=> (and (main@entry @unknown1_0)
           true
           (bvugt @llvm.used_0 #x00000000)
           (= main@%a.0.i_0 #x00000007))
      (main@_bb @unknown1_0 main@%a.0.i_0))))
(assert (forall ((main@%_1_0 (_ BitVec 32))
         (@unknown1_0 (_ BitVec 32))
         (main@%_2_0 (_ BitVec 32))
         (main@%_3_0 Bool)
         (main@%a.0.i_0 (_ BitVec 32))
         (main@%_4_0 (_ BitVec 32))
         (main@%a.0.i.lcssa_0 (_ BitVec 32)))
  (=> (and (main@_bb @unknown1_0 main@%a.0.i_0)
           true
           (= main@%_1_0 @unknown1_0)
           (= main@%_3_0 (= main@%_2_0 #x00000000))
           (= main@%_4_0 (bvadd main@%a.0.i_0 #x00000001))
           main@%_3_0
           (= main@%a.0.i.lcssa_0 main@%a.0.i_0))
      (main@verifier.error main@%a.0.i.lcssa_0))))
(assert (forall ((main@%_1_0 (_ BitVec 32))
         (@unknown1_0 (_ BitVec 32))
         (main@%_2_0 (_ BitVec 32))
         (main@%_3_0 Bool)
         (main@%a.0.i_0 (_ BitVec 32))
         (main@%_4_0 (_ BitVec 32))
         (main@%a.0.i_1 (_ BitVec 32)))
  (=> (and (main@_bb @unknown1_0 main@%a.0.i_0)
           true
           (= main@%_1_0 @unknown1_0)
           (= main@%_3_0 (= main@%_2_0 #x00000000))
           (= main@%_4_0 (bvadd main@%a.0.i_0 #x00000001))
           (not main@%_3_0)
           (= main@%a.0.i_1 main@%_4_0))
      (main@_bb @unknown1_0 main@%a.0.i_1))))
(assert (forall ((main@%_5_0 Bool) (main@%a.0.i.lcssa_0 (_ BitVec 32)))
  (=> (and (main@verifier.error main@%a.0.i.lcssa_0)
           true
           (= main@%_5_0 (= main@%a.0.i.lcssa_0 #x00000000))
           main@%_5_0)
      main@verifier.error.split)))
(assert (not (exists ((main@%_5_0 Bool)
              (main@%_1_0 (_ BitVec 32))
              (@unknown1_0 (_ BitVec 32))
              (main@%_2_0 (_ BitVec 32))
              (main@%_3_0 Bool)
              (@llvm.used_0 (_ BitVec 32))
              (main@%a.0.i_0 (_ BitVec 32))
              (main@%_4_0 (_ BitVec 32))
              (main@%a.0.i.lcssa_0 (_ BitVec 32))
              (main@%a.0.i_1 (_ BitVec 32)))
       (and main@verifier.error.split))))
(check-sat)

